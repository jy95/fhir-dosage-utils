"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[6614],{816:(e,n,t)=>{t.d(n,{A:()=>u});var o=t(96540),i=t(76300),s=t(88420),r=t(30788),a=t(74848);function u({dosage:e,config:n}){const[t,u]=(0,o.useState)(""),[l,c]=(0,o.useState)(n?.language||"en"),[d,f]=(0,o.useState)(null);(0,o.useEffect)(()=>{!async function(){const e=await i.U.build({...n});f(e)}()},[n]),(0,o.useEffect)(()=>{!async function(){if(d){const n=d.fromDosageToText(e);u(n)}}()},[e,d]);return(0,a.jsxs)("div",{children:[(0,a.jsxs)("div",{style:{display:"flex"},children:[(0,a.jsxs)("select",{value:l,onChange:e=>c(e.target.value),style:{marginRight:"10px"},children:[(0,a.jsx)("option",{value:"en",children:"English"}),(0,a.jsx)("option",{value:"fr",children:"French"}),(0,a.jsx)("option",{value:"nl",children:"Dutch"}),(0,a.jsx)("option",{value:"de",children:"German"})]}),(0,a.jsx)("button",{onClick:async()=>{if(d){await d.changeLanguage(l);const n=d.fromDosageToText(e);u(n)}},children:"Confirm"})]}),(0,a.jsx)("div",{style:{marginTop:"10px"},children:(0,a.jsx)(r.default,{language:"markup",children:(g=t,(0,s.D4)(g))})})]});var g}},58133:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>g,contentTitle:()=>f,default:()=>m,frontMatter:()=>d,metadata:()=>o,toc:()=>h});const o=JSON.parse('{"id":"custom/fromExtensionsToString","title":"\ud83d\udd0c fromExtensionsToString","description":"Function to turn extension(s) into a string for humans.","source":"@site/docs/custom/fromExtensionsToString.mdx","sourceDirName":"custom","slug":"/custom/fromExtensionsToString","permalink":"/fhir-dosage-utils/docs/custom/fromExtensionsToString","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/custom/fromExtensionsToString.mdx","tags":[],"version":"current","frontMatter":{"description":"Function to turn extension(s) into a string for humans.","title":"\ud83d\udd0c fromExtensionsToString"},"sidebar":"tutorialSidebar","previous":{"title":"\ud83d\udcbb fromCodeableConceptToString","permalink":"/fhir-dosage-utils/docs/custom/fromCodeableConceptToString"},"next":{"title":"\ud83d\udccf fromFHIRQuantityUnitToString","permalink":"/fhir-dosage-utils/docs/custom/fromFHIRQuantityUnitToString"}}');var i=t(74848),s=t(28453),r=t(30788);const a=JSON.parse('{"extension":[{"url":"https://www.ehealth.fgov.be/standards/fhir/medication/StructureDefinition/DosageOverride","valueBoolean":true},{"url":"https://www.ehealth.fgov.be/standards/fhir/medication/StructureDefinition/DosageOverrideReason","valueCodeableConcept":{"text":"Respect my authority ! - Eric Cartman"}}]}');var u=t(11470),l=t(19365),c=t(816);const d={description:"Function to turn extension(s) into a string for humans.",title:"\ud83d\udd0c fromExtensionsToString"},f=void 0,g={},h=[];function x(e){const n={code:"code",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(u.A,{children:[(0,i.jsx)(l.A,{value:"text",label:"Human readable text",default:!0,children:(0,i.jsx)(c.A,{dosage:a,config:{displayOrder:["extension","timingExtension","timingRepeatExtension"],fromExtensionsToString:({extensions:e,language:n})=>{if(void 0===e||0===e.length)return;return e.map(e=>{switch(e.url){case"https://www.ehealth.fgov.be/standards/fhir/medication/StructureDefinition/DosageOverride":let t=e.valueBoolean;return`[${n} translation of "dosageOverride" set to "${t}"]`;case"https://www.ehealth.fgov.be/standards/fhir/medication/StructureDefinition/DosageOverrideReason":return e.valueCodeableConcept.text;default:return`[${n} translation of "${JSON.stringify(e)}"]`}}).join(" | ")}}})}),(0,i.jsx)(l.A,{value:"json",label:"Dosage",children:(0,i.jsx)(r.default,{language:"json",children:JSON.stringify(a,null,2)})}),(0,i.jsx)(l.A,{value:"config",label:"Configuration",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'{\n    displayOrder: ["extension", "timingExtension", "timingRepeatExtension"],\n    fromExtensionsToString: ({extensions, language}) => {\n        // If no extensions, skip it\n        if (extensions === undefined || extensions.length === 0) {\n            return undefined;\n        }\n\n        // Your own logic here ;)\n        const parts = extensions.map(extension => {\n            switch(extension.url) {\n                case "https://www.ehealth.fgov.be/standards/fhir/medication/StructureDefinition/DosageOverride":\n                    let dosageOverride = extension.valueBoolean;\n                    return `[${language} translation of "dosageOverride" set to "${dosageOverride}"]`;\n                case "https://www.ehealth.fgov.be/standards/fhir/medication/StructureDefinition/DosageOverrideReason":\n                    return extension.valueCodeableConcept.text;\n                default:\n                    return `[${language} translation of "${JSON.stringify(extension)}"]`;\n            }\n        });\n\n        return parts.join(" | ");\n    }\n}\n'})})})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(x,{...e})}):x(e)}}}]);